var app = new Vue({
    el: "#app",
    data: {
        title: '卡牌对比计算器-国服',
        propObj: {
            1: '典雅',
            2: '清新',
            3: '甜美',
            4: '性感',
            5: '帅气'
        },
        allPropKey: '1',// 卡牌库绑定的属性radio
        mainPropKey: '1',// 卡牌1绑定的属性radio
        secondPropKey: '1',// 卡牌2绑定的属性radio
        mainPropScore: 0,//卡牌1印象总分
        secondPropScore: 0,//卡牌2印象总分
        allPropRoleObj: {},//卡牌库中选中的属性对应的角色列表
        mainPropRoleObj: {},//卡牌1中选中的属性对应的角色列表
        secondPropRoleObj: {},//卡牌2中选中的属性对应的角色列表
        allRoleObj:{
            propRoleKey: '',//角色
            propRoleVal: '',
            isFusu: false,
            roleLevelVal: 80,//角色等级
            starVal: 24,//星级
            collectVal: 0,//馆藏
            shadowVal: 0,//影子
            shadowLevelVal: 1,
            passiveSkillVal1: 0,
            passiveSkillLevelVal1: 1,
            passiveSkillVal2: 0,
            passiveSkillLevelVal2: 1,
            passiveSkillVal3: 0,
            passiveSkillLevelVal3:1,
            coreImpressionVal: 2,
            coreImpressionLevelVal: 5,
            coreImpressionTypeVal: 1,
        },//卡牌库中选中的角色的属性对象
        mainRoleObj:{
            propRoleKey: '',//角色
            propRoleVal: '',
            isFusu: false,
            roleLevelVal: 80,//角色等级
            starVal: 24,//星级
            collectVal: 0,//馆藏
            shadowVal: 0,//影子
            shadowLevelVal: 1,
            passiveSkillVal1: 0,
            passiveSkillLevelVal1: 1,
            passiveSkillVal2: 0,
            passiveSkillLevelVal2: 1,
            passiveSkillVal3: 0,
            passiveSkillLevelVal3:1,
            coreImpressionVal: 2,
            coreImpressionLevelVal: 5,
            coreImpressionTypeVal: 1,
        },//卡牌1中选中的角色的属性对象
        secondRoleObj:{
            propRoleKey: '',//角色
            propRoleVal: '',
            isFusu: false,
            roleLevelVal: 80,//角色等级
            starVal: 24,//星级
            collectVal: 0,//馆藏
            shadowVal: 0,//影子
            shadowLevelVal: 1,
            passiveSkillVal1: 0,
            passiveSkillLevelVal1: 1,
            passiveSkillVal2: 0,
            passiveSkillLevelVal2: 1,
            passiveSkillVal3: 0,
            passiveSkillLevelVal3:1,
            coreImpressionVal: 2,
            coreImpressionLevelVal: 5,
            coreImpressionTypeVal: 1,
        },//卡牌2中选中的角色的属性对象
        starArr: [],
        shadowArr: ['闪耀瞬间得分提升','某个环节使用额外得分','10秒内心之技能得分提升','20秒内心之技能得分提升','额外闪耀瞬间','功能卡'],
        passiveSkillArr: ['无','头发','衣服','鞋子','饰品'],
        coreImpressionObj: {
            1: '普通',
            2: '稀有',
            3: '非凡',
            5: '非凡-鹿',
            4: '闪耀'
        },
        coreImpressionLevelObj: {
            1: '深化1花',
            2: '深化2花',
            3: '深化3花',
            4: '深化4花',
            5: '深化5花'
        },
        coreImpressionTypeObj: {
            1: '提供心之技能分数',
            2: '提供影之召唤分数',
        },
        czMode: 1,
        mainPower: 0,
        mainScore: 0,
        secondPower: 0,
        secondScore: 0,
        makeupSum: 84,
        collection:[],
        collectionFlag: false,
        cards: true,
        compareResult: 0,
        collectionKey: "collection",
        allRoleKey:"allRoleKey",
        makeupData: {
            //人物名字："爱衣"
            //卡牌名字："最初的告白"
            //稀有度（稀有3/非凡4/闪耀5）："3"
            //主属性（典雅1/清新2/甜美3/性感4/帅气5）："1"
            //五个初始属性（去除馆藏，按典雅、清新、甜美、性感、帅气排序）："248", "129", "119", "96", "98"
            //影技（闪瞬0，环节1，十秒2，二十秒3，双闪4，功能5）：5
            //三个被动（头发0，衣服1，鞋袜2，饰品3，无-1）：3, 0, -1
            //馆藏："白日梦少女"
            //数组固定长度14
            1: ["爱衣", "最初的告白", "3", "1", "248", "129", "119", "96", "98", 5, 3, 0, -1, "白日梦少女"],
            2: ["暖暖", "初雪", "3", "3", "96", "100", "247", "127", "125", 3, 3, 2, -1, "命运交响"],
            3: ["收视搭档", "荒原印象", "3", "2", "104", "260", "131", "129", "101", 1, 0, 3, -1, "千羽森林"],
            4: ["夜宵", "初醒玉兰", "3", "2", "103", "248", "126", "129", "97", 3, 2, 0, -1, "千羽森林"],
            5: ["洛洛梨", "暗夜优雅", "4", "1", "380", "191", "190", "151", "151", 0, 1, 2, 3, "眩光"],
            6: ["一衣红雪", "花影遥", "4", "2", "155", "379", "185", "189", "152", 3, 0, 1, 2, "如烟"],
            7: ["左一", "佣兵女王", "4", "5", "192", "186", "148", "155", "379", 2, 1, 3, 2, "钢铁之心"],
            8: ["爱衣", "天空遥想", "3", "3", "101", "98", "255", "130", "127", 1, 2, 1, -1, "白日梦少女"],
            9: ["洛昂", "雪夜之鹰", "3", "5", "125", "131", "99", "100", "254", 2, 1, 0, -1, "钢铁之心"],
            10: ["洛洛梨", "小雏菊日记", "3", "3", "102", "102", "252", "131", "130", 0, 1, 3, -1, "镜中圆舞"],
            11: ["夏冬", "魔法的祝福", "4", "3", "149", "149", "379", "190", "190", 5, 2, 0, 3, "洛登街景"],
            12: ["秦衣", "故年清梦", "3", "2", "102", "245", "119", "118", "99", 0, 3, 2, -1, "裂帛惊梦"],
            13: ["夜骸", "灵魂魔术", "4", "3", "153", "153", "392", "192", "199", 0, 2, 3, 1, "眩光"],
            14: ["魔羊", "废墟核芯", "3", "4", "123", "95", "101", "247", "123", 0, 3, 0, -1, "钢铁之心"],
            15: ["海哲", "钻石星烁夜", "3", "4", "121", "97", "102", "249", "126", 5, 0, 3, -1, "镜中圆舞"],
            16: ["一衣红雪", "椿盛", "3", "1", "257", "128", "130", "101", "101", 5, 1, 2, -1, "如烟"],
            17: ["秦衣", "镜花水月", "4", "2", "158", "392", "196", "194", "154", 5, 0, 3, 2, "裂帛惊梦"],
            18: ["墨丘利", "精灵哀歌", "5", "2", "204", "500", "250", "248", "198", 3, 1, 3, 2, "千羽森林"],
            19: ["秦衣", "辞凤阙", "5", "1", "496", "250", "251", "198", "196", 2, 3, 2, 0, "裂帛惊梦"],
            20: ["灰灰草", "流星之羽", "3", "4", "125", "100", "99", "244", "117", 1, 1, 2, -1, "眩光"],
            21: ["莉莉斯", "欲望之音", "5", "4", "253", "203", "201", "499", "254", 0, 1, 0, 2, "眩光"],
            22: ["洛昂", "璀璨之约", "5", "1", "501", "250", "254", "203", "200", 1, 3, 2, 1, "镜中圆舞"],
            23: ["佐森佑果", "童话香氛", "4", "3", "153", "147", "376", "184", "187", 5, 1, 2, 0, "镜中圆舞"],
            24: ["茶薄荷", "眠眠兔", "3", "3", "96", "104", "250", "125", "130", 5, 0, 2, -1, "白日梦少女"],
            25: ["江西桐", "青瓷吹雪", "3", "1", "260", "131", "135", "107", "107", 0, 0, 1, -1, "裂帛惊梦"],
            26: ["佐森佑果", "朋克之夜", "3", "5", "125", "126", "103", "100", "260", 1, 0, 3, -1, "眩光"],
            27: ["墨丘利", "街拍风潮", "3", "5", "131", "125", "100", "99", "253", 4, 0, 3, -1, "洛登街景"],
            28: ["倾羽墨", "一瞬倾城", "4", "1", "382", "186", "195", "152", "149", 5, 3, 1, 2, "裂帛惊梦"],
            29: ["洛昂", "流光花蔓", "4", "2", "157", "394", "201", "198", "159", 0, 3, 2, 1, "千羽森林"],
            30: ["李尔里德", "抖落繁星", "4", "3", "147", "151", "376", "193", "193", 1, 1, 0, 2, "命运交响"],
            31: ["莉莉斯", "夜来香之吻", "4", "4", "192", "156", "151", "383", "192", 5, 2, 1, 0, "白日梦少女"],
            32: ["魔羊", "苍羽流光", "4", "4", "199", "162", "160", "395", "196", 2, 2, 0, 1, "钢铁之心"],
            33: ["暖暖", "诗意绽放", "3", "1", "251", "130", "126", "100", "97", 2, 0, 2, -1, "命运交响"],
            34: ["秦衣", "夜阑月", "3", "1", "246", "125", "124", "97", "96", 1, 0, 3, -1, "如烟"],
            35: ["洛昂", "飞鸟与自由", "4", "5", "155", "152", "188", "189", "395", 1, 3, 2, 1, "裂帛惊梦"],
            36: ["倾羽墨", "季夏之梦", "3", "2", "125", "261", "122", "98", "99", 2, 1, 2, -1, "如烟"],
            37: ["莉莉斯", "恶魔的私语", "4", "4", "188", "154", "149", "382", "199", 5, 3, 2, 0, "眩光"],
            38: ["墨丘利", "雾夜咏叹", "4", "2", "168", "416", "203", "207", "167", 1, 2, 0, 1, "千羽森林"],
            39: ["夜宵", "晨露花园", "3", "3", "122", "120", "252", "104", "97", 5, 1, 2, -1, "白日梦少女"],
            40: ["左一", "鎏金之梦", "4", "1", "408", "207", "201", "161", "161", 1, 1, 0, 2, "洛登街景"],
            41: ["暖暖", "加油鸭", "4", "5", "145", "196", "189", "149", "395", 0, 3, 2, 1, "白日梦少女"],
            42: ["阿欢", "完美实验", "3", "4", "125", "94", "100", "245", "132", 2, 1, 2, -1, "洛登街景"],
            43: ["夜宵", "云深处", "4", "1", "420", "199", "174", "166", "217", 4, 3, 2, 1, "轻歌行"],
            44: ["暖暖", "晴夏海风", "4", "4", "160", "184", "198", "401", "151", 0, 0, 3, 1, "心之奏鸣曲"],
            45: ["宙", "蒸汽幻想", "5", "4", "193", "199", "255", "496", "252", 3, 1, 0, 2, "逆转游戏"],
            46: ["夜宵", "落花吟", "4", "2", "154", "391", "199", "197", "155", 5, 3, 2, 0, "如烟"],
            47: ["暖暖", "极夜破晓", "4", "5", "193", "149", "156", "186", "384", 4, 1, 2, 0, "心之奏鸣曲"],
            48: ["海", "星夜烟花", "3", "3", "123", "123", "246", "123", "123", 2, 3, 2, -1, "心之奏鸣曲"],
            49: ["莉莉斯", "绒兔星球", "4", "4", "152", "198", "194", "390", "145", 1, 0, 1, 2, "镜中圆舞"],
            50: ["海哲", "晨雾微风", "4", "1", "388", "189", "197", "155", "159", 2, 0, 2, 1, "镜中圆舞",],
            51: ["暖暖", "可可心情", "3", "3", "93", "118", "241", "103", "112", 1, 0, 3, -1, "心之奏鸣曲"],
            52: ["左一", "午夜印象", "4", "5", "198", "161", "157", "191", "388", 5, 1, 0, 2, "逆转游戏"],
            53: ["暖暖", "绿茵小调", "3", "5", "132", "95", "118", "99", "244", 5, 2, 0, -1, "逆转游戏"],
            54: ["左一", "暮夜星云", "3", "5", "132", "101", "104", "135", "256", 5, 0, 1, -1, "轻歌行"],
            55: ["暖暖", "绿野牧歌", "4", "2", "203", "380", "185", "155", "153", 1, 1, 2, 0, "千羽森林"],
            56: ["洛昂", "锦狐灼灼", "5", "3", "241", "208", "489", "259", "192", 0, 0, 1, 2, "绮想夜"],
            57: ["海", "涂鸦游戏", "3", "5", "91", "125", "105", "126", "248", 3, 3, 2, -1, "逆转游戏"],
            58: ["宙", "海沫遐思", "4", "1", "377", "183", "146", "199", "160", 1, 0, 3, 1, "心之奏鸣曲"],
            59: ["爱衣", "像素大冒险", "4", "5", "151", "192", "186", "153", "386", 5, 0, 3, 2, "逆转游戏"],
            60: ["暖暖", "时光花园", "4", "3", "190", "184", "380", "150", "154", 3, 0, 1, 2, "命运交响"],
            61: ["墨丘利", "甜蜜人偶", "4", "3", "152", "153", "376", "183", "188", 2, 2, 1, 3, "洛登街景"],
            62: ["暖暖", "温暖守护", "3", "3", "91", "122", "246", "99", "119", 4, 1, 3, -1, "心之奏鸣曲"],
            63: ["莉莉斯", "圣诞糖霜", "4", "3", "161", "194", "382", "183", "144", 1, 1, 0, 2, "镜中圆舞"],
            64: ["墨丘利", "轻雪遥歌", "4", "2", "183", "387", "148", "186", "159", 4, 3, 2, 1, "千羽森林"],
            65: ["海", "独角兽绮梦", "3", "3", "98", "121", "248", "91", "120", 1, 3, 0, -1, "心之奏鸣曲"],
            66: ["左一", "锦衣行歌", "5", "1", "488", "207", "193", "155", "142", 3, 1, 3, 2, "钢铁之心"],
            67: ["池小鱼", "初夏新雨", "3", "2", "103", "252", "122", "127", "102", 1, 3, 0, -1, "如烟"],
            68: ["夜宵", "春林绘色", "4", "1", "390", "193", "196", "160", "155", 5, 0, 3, 1, "轻歌行"],
            69: ["鹿明", "鹿祈云泽", "5", "5", "242", "244", "185", "202", "504", 0, 0, 1, 2, "裂帛惊梦"],
            70: ["夜宵", "千重梦", "5", "2", "201", "506", "248", "250", "186", 1, 0, 2, 1, "如烟"],
            71: ["秦衣", "杜若岚纱", "4", "1", "392", "196", "183", "160", "153", 3, 0, 1, 2, "裂帛惊梦"],
            72: ["秦衣", "墨色音潮", "4", "5", "199", "148", "150", "187", "378", 2, 0, 2, 1, "逆转游戏"],
            73: ["一衣红雪", "新岁锦时", "4", "4", "160", "196", "194", "384", "159", 1, 2, 0, 1, "如烟"],
            74: ["池小鱼", "灯宵元夕", "4", "2", "145", "385", "198", "188", "148", 3, 0, 1, 2, "轻歌行"],
            75: ["洛洛梨", "远野采风", "3", "2", "105", "252", "137", "137", "105", 3, 3, 1, -1, "心之奏鸣曲"],
            76: ["佑果", "早安小厨娘", "3", "2", "105", "252", "137", "137", "105", 1, 2, 1, -1, "白日梦少女"],
            77: ["暖暖", "暖心玩搭", "3", "2", "97", "262", "104", "132", "126", 5, 1, 2, -1, "白日梦少女"],
            78: ["收拾搭档", "原野诗篇", "3", "2", "97", "262", "104", "132", "126", 0, 0, 2, -1, "千羽森林"],
            79: ["莉莉斯", "夜莺与晨雾", "4", "2", "161", "396", "202", "202", "161", 1, 1, 0, 2, "眩光"],
            80: ["灰灰草", "无声祷告", "4", "5", "190", "188", "152", "157", "392", 1, 1, 0, 2, "心之奏鸣曲"],
            81: ["秦衣", "南风春煦", "4", "1", "391", "192", "192", "148", "148", 1, 2, 0, 1, "如烟"],
            82: ["叶维冬", "云间千纸", "3", "2", "103", "261", "127", "127", "103", 5, 2, 1, -1, "如烟"],
            83: ["墨丘利", "黎光序曲", "4", "2", "103", "261", "127", "127", "103", 4, 1, 2, 0, "镜中圆舞"],
            84: ["海", "奇趣环游", "4", "3", "161", "161", "396", "202", "202", 1, 0, 3, 1, "命运交响"],
        },
        makeupTemplate: {
            //三个被动（头发0，衣服1，鞋袜2，饰品3，无-1）
            //lv3n,level,exp,
            "lv3n": [
                [1, 10,],
                [2, 20,],
                [3, 30,],
                [4, 60,],
                [5, 90,],
                [6, 120,],
                [7, 170,],
                [8, 210,],
                [9, 270,],
                [10, 330,],
                [11, 400,],
                [12, 470,],
                [13, 540,],
                [14, 630,],
                [15, 720,],
                [16, 820,],
                [17, 920,],
                [18, 1030,],
                [19, 1140,],
                [20, 1260,],
                [21, 1386,],
                [22, 1518,],
                [23, 1656,],
                [24, 1800,],
                [25, 1950,],
                [26, 2106,],
                [27, 2268,],
                [28, 2436,],
                [29, 2610,],
                [30, 2790,],
                [31, 2976,],
                [32, 3168,],
                [33, 3366,],
                [34, 3570,],
                [35, 3780,],
                [36, 3996,],
                [37, 4218,],
                [38, 4446,],
                [39, 4680,],
                [40, 4920,],
                [41, 5166,],
                [42, 5418,],
                [43, 5676,],
                [44, 5940,],
                [45, 6210,],
                [46, 6486,],
                [47, 6768,],
                [48, 7056,],
                [49, 7350,],
                [50, 7650,],
                [51, 7956,],
                [52, 8268,],
                [53, 8586,],
                [54, 8910,],
                [55, 9240,],
                [56, 9576,],
                [57, 9918,],
                [58, 10266,],
                [59, 10620,],
                [60, 0,],
            ],
//lv4n,level,exp,
            "lv4n": [
                [1, 10,],
                [2, 20,],
                [3, 30,],
                [4, 60,],
                [5, 90,],
                [6, 120,],
                [7, 170,],
                [8, 210,],
                [9, 270,],
                [10, 330,],
                [11, 400,],
                [12, 470,],
                [13, 540,],
                [14, 630,],
                [15, 720,],
                [16, 820,],
                [17, 920,],
                [18, 1030,],
                [19, 1140,],
                [20, 1260,],
                [21, 1386,],
                [22, 1518,],
                [23, 1656,],
                [24, 1800,],
                [25, 1950,],
                [26, 2106,],
                [27, 2268,],
                [28, 2436,],
                [29, 2610,],
                [30, 2790,],
                [31, 2976,],
                [32, 3168,],
                [33, 3366,],
                [34, 3570,],
                [35, 3780,],
                [36, 3996,],
                [37, 4218,],
                [38, 4446,],
                [39, 4680,],
                [40, 4920,],
                [41, 5166,],
                [42, 5418,],
                [43, 5676,],
                [44, 5940,],
                [45, 6210,],
                [46, 6486,],
                [47, 6768,],
                [48, 7056,],
                [49, 7350,],
                [50, 7650,],
                [51, 7956,],
                [52, 8268,],
                [53, 8586,],
                [54, 8910,],
                [55, 9240,],
                [56, 9576,],
                [57, 9918,],
                [58, 10266,],
                [59, 10620,],
                [60, 10980,],
                [61, 11346,],
                [62, 11718,],
                [63, 12096,],
                [64, 12480,],
                [65, 12870,],
                [66, 13266,],
                [67, 13668,],
                [68, 14076,],
                [69, 14490,],
                [70, 14910,],
                [71, 15336,],
                [72, 15768,],
                [73, 16206,],
                [74, 16650,],
                [75, 17100,],
                [76, 17556,],
                [77, 18018,],
                [78, 18486,],
                [79, 18960,],
                [80, 0,],
            ],
//lv5n,level,exp,
            "lv5n": [
                [1, 15,],
                [2, 25,],
                [3, 40,],
                [4, 80,],
                [5, 120,],
                [6, 160,],
                [7, 230,],
                [8, 280,],
                [9, 360,],
                [10, 440,],
                [11, 530,],
                [12, 630,],
                [13, 720,],
                [14, 840,],
                [15, 960,],
                [16, 1090,],
                [17, 1230,],
                [18, 1370,],
                [19, 1520,],
                [20, 1680,],
                [21, 1848,],
                [22, 2024,],
                [23, 2208,],
                [24, 2400,],
                [25, 2600,],
                [26, 2808,],
                [27, 3024,],
                [28, 3248,],
                [29, 3480,],
                [30, 3720,],
                [31, 3968,],
                [32, 4224,],
                [33, 4488,],
                [34, 4760,],
                [35, 5040,],
                [36, 5328,],
                [37, 5624,],
                [38, 5928,],
                [39, 6240,],
                [40, 6560,],
                [41, 6888,],
                [42, 7224,],
                [43, 7568,],
                [44, 7920,],
                [45, 8280,],
                [46, 8648,],
                [47, 9024,],
                [48, 9408,],
                [49, 9800,],
                [50, 10200,],
                [51, 10608,],
                [52, 11024,],
                [53, 11448,],
                [54, 11880,],
                [55, 12320,],
                [56, 12768,],
                [57, 13224,],
                [58, 13688,],
                [59, 14160,],
                [60, 14640,],
                [61, 15128,],
                [62, 15624,],
                [63, 16128,],
                [64, 16640,],
                [65, 17160,],
                [66, 17688,],
                [67, 18224,],
                [68, 18768,],
                [69, 19320,],
                [70, 19880,],
                [71, 20448,],
                [72, 21024,],
                [73, 21608,],
                [74, 22200,],
                [75, 22800,],
                [76, 23408,],
                [77, 24024,],
                [78, 24648,],
                [79, 25280,],
                [80, 0,],
            ],
//lvstatus3n,level,stage,style1,style2,
            "lvstatus3n": [
                [1, 0, 0, 0,],
                [2, 0, 46, 23,],
                [3, 0, 92, 46,],
                [4, 0, 138, 69,],
                [5, 0, 184, 92,],
                [6, 0, 230, 115,],
                [7, 0, 276, 138,],
                [8, 0, 322, 161,],
                [9, 0, 368, 184,],
                [10, 0, 414, 207,],
                [11, 0, 460, 230,],
                [12, 0, 506, 253,],
                [13, 0, 552, 276,],
                [14, 0, 598, 299,],
                [15, 0, 644, 322,],
                [16, 0, 690, 345,],
                [17, 0, 736, 368,],
                [18, 0, 782, 391,],
                [19, 0, 828, 414,],
                [20, 1, 874, 437,],
                [21, 1, 920, 460,],
                [22, 1, 966, 483,],
                [23, 1, 1012, 506,],
                [24, 1, 1058, 529,],
                [25, 1, 1104, 552,],
                [26, 1, 1150, 575,],
                [27, 1, 1196, 598,],
                [28, 1, 1242, 621,],
                [29, 1, 1288, 644,],
                [30, 1, 1334, 667,],
                [31, 1, 1380, 690,],
                [32, 1, 1426, 713,],
                [33, 1, 1472, 736,],
                [34, 1, 1518, 759,],
                [35, 1, 1564, 782,],
                [36, 1, 1610, 805,],
                [37, 1, 1656, 828,],
                [38, 1, 1702, 851,],
                [39, 1, 1748, 874,],
                [40, 2, 1794, 897,],
                [41, 2, 1840, 920,],
                [42, 2, 1886, 943,],
                [43, 2, 1932, 966,],
                [44, 2, 1978, 989,],
                [45, 2, 2024, 1012,],
                [46, 2, 2070, 1035,],
                [47, 2, 2116, 1058,],
                [48, 2, 2162, 1081,],
                [49, 2, 2208, 1104,],
                [50, 3, 2254, 1127,],
                [51, 3, 2300, 1150,],
                [52, 3, 2346, 1173,],
                [53, 3, 2392, 1196,],
                [54, 3, 2438, 1219,],
                [55, 3, 2484, 1242,],
                [56, 3, 2530, 1265,],
                [57, 3, 2576, 1288,],
                [58, 3, 2622, 1311,],
                [59, 3, 2668, 1334,],
                [60, 3, 2714, 1357,],
            ],
//lvstatus4n,level,stage,style1,style2,
            "lvstatus4n": [
                [1, 0, 0, 0,],
                [2, 0, 69, 34,],
                [3, 0, 138, 69,],
                [4, 0, 207, 103,],
                [5, 0, 276, 138,],
                [6, 0, 345, 172,],
                [7, 0, 414, 207,],
                [8, 0, 483, 241,],
                [9, 0, 552, 276,],
                [10, 0, 621, 310,],
                [11, 0, 690, 345,],
                [12, 0, 759, 379,],
                [13, 0, 828, 414,],
                [14, 0, 897, 448,],
                [15, 0, 966, 483,],
                [16, 0, 1035, 517,],
                [17, 0, 1104, 552,],
                [18, 0, 1173, 586,],
                [19, 0, 1242, 621,],
                [20, 1, 1311, 655,],
                [21, 1, 1380, 690,],
                [22, 1, 1449, 724,],
                [23, 1, 1518, 759,],
                [24, 1, 1587, 793,],
                [25, 1, 1656, 828,],
                [26, 1, 1725, 862,],
                [27, 1, 1794, 897,],
                [28, 1, 1863, 931,],
                [29, 1, 1932, 966,],
                [30, 1, 2001, 1000,],
                [31, 1, 2070, 1035,],
                [32, 1, 2139, 1069,],
                [33, 1, 2208, 1104,],
                [34, 1, 2277, 1138,],
                [35, 1, 2346, 1173,],
                [36, 1, 2415, 1207,],
                [37, 1, 2484, 1242,],
                [38, 1, 2553, 1276,],
                [39, 1, 2622, 1311,],
                [40, 2, 2691, 1345,],
                [41, 2, 2760, 1380,],
                [42, 2, 2829, 1414,],
                [43, 2, 2898, 1449,],
                [44, 2, 2967, 1483,],
                [45, 2, 3036, 1518,],
                [46, 2, 3105, 1552,],
                [47, 2, 3174, 1587,],
                [48, 2, 3243, 1621,],
                [49, 2, 3312, 1656,],
                [50, 2, 3381, 1690,],
                [51, 2, 3450, 1725,],
                [52, 2, 3519, 1759,],
                [53, 2, 3588, 1794,],
                [54, 2, 3657, 1828,],
                [55, 2, 3726, 1863,],
                [56, 2, 3795, 1897,],
                [57, 2, 3864, 1932,],
                [58, 2, 3933, 1966,],
                [59, 2, 4002, 2001,],
                [60, 3, 4071, 2035,],
                [61, 3, 4140, 2070,],
                [62, 3, 4209, 2104,],
                [63, 3, 4278, 2139,],
                [64, 3, 4347, 2173,],
                [65, 3, 4416, 2208,],
                [66, 3, 4485, 2242,],
                [67, 3, 4554, 2277,],
                [68, 3, 4623, 2311,],
                [69, 3, 4692, 2346,],
                [70, 4, 4761, 2380,],
                [71, 4, 4830, 2415,],
                [72, 4, 4899, 2449,],
                [73, 4, 4968, 2484,],
                [74, 4, 5037, 2518,],
                [75, 4, 5106, 2553,],
                [76, 4, 5175, 2587,],
                [77, 4, 5244, 2622,],
                [78, 4, 5313, 2656,],
                [79, 4, 5382, 2691,],
                [80, 4, 5451, 2725,],
            ],
//lvstatus5n,level,stage,style1,style2,
            "lvstatus5n": [
                [1, 0, 0, 0,],
                [2, 0, 92, 46,],
                [3, 0, 184, 92,],
                [4, 0, 276, 138,],
                [5, 0, 368, 184,],
                [6, 0, 460, 230,],
                [7, 0, 552, 276,],
                [8, 0, 644, 322,],
                [9, 0, 736, 368,],
                [10, 0, 828, 414,],
                [11, 0, 920, 460,],
                [12, 0, 1012, 506,],
                [13, 0, 1104, 552,],
                [14, 0, 1196, 598,],
                [15, 0, 1288, 644,],
                [16, 0, 1380, 690,],
                [17, 0, 1472, 736,],
                [18, 0, 1564, 782,],
                [19, 0, 1656, 828,],
                [20, 1, 1748, 874,],
                [21, 1, 1840, 920,],
                [22, 1, 1932, 966,],
                [23, 1, 2024, 1012,],
                [24, 1, 2116, 1058,],
                [25, 1, 2208, 1104,],
                [26, 1, 2300, 1150,],
                [27, 1, 2392, 1196,],
                [28, 1, 2484, 1242,],
                [29, 1, 2576, 1288,],
                [30, 1, 2668, 1334,],
                [31, 1, 2760, 1380,],
                [32, 1, 2852, 1426,],
                [33, 1, 2944, 1472,],
                [34, 1, 3036, 1518,],
                [35, 1, 3128, 1564,],
                [36, 1, 3220, 1610,],
                [37, 1, 3312, 1656,],
                [38, 1, 3404, 1702,],
                [39, 1, 3496, 1748,],
                [40, 2, 3588, 1794,],
                [41, 2, 3680, 1840,],
                [42, 2, 3772, 1886,],
                [43, 2, 3864, 1932,],
                [44, 2, 3956, 1978,],
                [45, 2, 4048, 2024,],
                [46, 2, 4140, 2070,],
                [47, 2, 4232, 2116,],
                [48, 2, 4324, 2162,],
                [49, 2, 4416, 2208,],
                [50, 2, 4508, 2254,],
                [51, 2, 4600, 2300,],
                [52, 2, 4692, 2346,],
                [53, 2, 4784, 2392,],
                [54, 2, 4876, 2438,],
                [55, 2, 4968, 2484,],
                [56, 2, 5060, 2530,],
                [57, 2, 5152, 2576,],
                [58, 2, 5244, 2622,],
                [59, 2, 5336, 2668,],
                [60, 3, 5428, 2714,],
                [61, 3, 5520, 2760,],
                [62, 3, 5612, 2806,],
                [63, 3, 5704, 2852,],
                [64, 3, 5796, 2898,],
                [65, 3, 5888, 2944,],
                [66, 3, 5980, 2990,],
                [67, 3, 6072, 3036,],
                [68, 3, 6164, 3082,],
                [69, 3, 6256, 3128,],
                [70, 4, 6348, 3174,],
                [71, 4, 6440, 3220,],
                [72, 4, 6532, 3266,],
                [73, 4, 6624, 3312,],
                [74, 4, 6716, 3358,],
                [75, 4, 6808, 3404,],
                [76, 4, 6900, 3450,],
                [77, 4, 6992, 3496,],
                [78, 4, 7084, 3542,],
                [79, 4, 7176, 3588,],
                [80, 4, 7268, 3634,],
            ],
//g3n,id,step,stage,status,
            "g3n": [
                [1, 0, 0, 0,],
                [2, 1, 0, 178,],
                [3, 2, 0, 356,],
                [4, 3, 0, 534,],
                [5, 4, 0, 712,],
                [6, 5, 0, 890,],
                [7, 0, 1, 1068,],
                [8, 1, 1, 1319,],
                [9, 2, 1, 1570,],
                [10, 3, 1, 1821,],
                [11, 4, 1, 2072,],
                [12, 5, 1, 2323,],
                [13, 0, 2, 2574,],
                [14, 1, 2, 2882,],
                [15, 2, 2, 3190,],
                [16, 3, 2, 3498,],
                [17, 4, 2, 3806,],
                [18, 5, 2, 4114,],
                [19, 0, 3, 4422,],
            ],
//g4n,id,step,stage,status,
            "g4n": [
                [1, 0, 0, 0,],
                [2, 1, 0, 267,],
                [3, 2, 0, 534,],
                [4, 3, 0, 801,],
                [5, 4, 0, 1068,],
                [6, 5, 0, 1335,],
                [7, 0, 1, 1602,],
                [8, 1, 1, 1978,],
                [9, 2, 1, 2354,],
                [10, 3, 1, 2730,],
                [11, 4, 1, 3106,],
                [12, 5, 1, 3482,],
                [13, 0, 2, 3858,],
                [14, 1, 2, 4319,],
                [15, 2, 2, 4780,],
                [16, 3, 2, 5241,],
                [17, 4, 2, 5702,],
                [18, 5, 2, 6163,],
                [19, 0, 3, 6624,],
                [20, 1, 3, 7156,],
                [21, 2, 3, 7688,],
                [22, 3, 3, 8220,],
                [23, 4, 3, 8752,],
                [24, 5, 3, 9284,],
                [25, 0, 4, 9816,],
            ],
//g5n,id,step,stage,status,
            "g5n": [
                [1, 0, 0, 0,],
                [2, 1, 0, 356,],
                [3, 2, 0, 712,],
                [4, 3, 0, 1068,],
                [5, 4, 0, 1424,],
                [6, 5, 0, 1780,],
                [7, 0, 1, 2136,],
                [8, 1, 1, 2638,],
                [9, 2, 1, 3140,],
                [10, 3, 1, 3642,],
                [11, 4, 1, 4144,],
                [12, 5, 1, 4646,],
                [13, 0, 2, 5148,],
                [14, 1, 2, 5764,],
                [15, 2, 2, 6380,],
                [16, 3, 2, 6996,],
                [17, 4, 2, 7612,],
                [18, 5, 2, 8228,],
                [19, 0, 3, 8844,],
                [20, 1, 3, 9554,],
                [21, 2, 3, 10264,],
                [22, 3, 3, 10974,],
                [23, 4, 3, 11684,],
                [24, 5, 3, 12394,],
                [25, 0, 4, 13104,],
            ],
//gc3n,id,step,stage,gold,key1,key2,number1,number2,
            "gc3n": [
                [1, 0, 0, 5000, 104, 105, 8, 3,],
                [2, 1, 0, 5000, 104, 105, 12, 5,],
                [3, 2, 0, 5000, 104, 105, 20, 8,],
                [4, 3, 0, 5000, 104, 105, 28, 11,],
                [5, 4, 0, 5000, 104, 105, 32, 13,],
                [6, 5, 0, 25000, 104, 105, 20, 8,],
                [7, 0, 1, 15000, 104, 105, 24, 10,],
                [8, 1, 1, 15000, 104, 105, 36, 14,],
                [9, 2, 1, 15000, 104, 105, 60, 24,],
                [10, 3, 1, 15000, 104, 105, 84, 34,],
                [11, 4, 1, 15000, 104, 105, 96, 38,],
                [12, 5, 1, 75000, 104, 105, 60, 24,],
                [13, 0, 2, 30000, 104, 105, 48, 19,],
                [14, 1, 2, 30000, 104, 105, 72, 29,],
                [15, 2, 2, 30000, 104, 105, 120, 48,],
                [16, 3, 2, 30000, 104, 105, 168, 67,],
                [17, 4, 2, 30000, 104, 105, 192, 77,],
                [18, 5, 2, 150000, 104, 105, 120, 48,],
            ],
//gc4n,id,step,stage,gold,key1,key2,number1,number2,
            "gc4n": [
                [1, 0, 0, 16875, 104, 105, 16, 6,],
                [2, 1, 0, 16875, 104, 105, 24, 10,],
                [3, 2, 0, 16875, 104, 105, 40, 16,],
                [4, 3, 0, 16875, 104, 105, 56, 22,],
                [5, 4, 0, 16875, 104, 105, 64, 26,],
                [6, 5, 0, 50625, 104, 105, 40, 16,],
                [7, 0, 1, 33750, 104, 105, 32, 13,],
                [8, 1, 1, 33750, 104, 105, 48, 19,],
                [9, 2, 1, 33750, 104, 105, 80, 32,],
                [10, 3, 1, 33750, 104, 105, 112, 45,],
                [11, 4, 1, 33750, 104, 105, 128, 51,],
                [12, 5, 1, 101250, 104, 105, 80, 32,],
                [13, 0, 2, 50625, 104, 105, 48, 19,],
                [14, 1, 2, 50625, 104, 105, 72, 29,],
                [15, 2, 2, 50625, 104, 105, 120, 48,],
                [16, 3, 2, 50625, 104, 105, 168, 67,],
                [17, 4, 2, 50625, 104, 105, 192, 77,],
                [18, 5, 2, 151875, 104, 105, 120, 48,],
                [19, 0, 3, 67500, 104, 105, 64, 26,],
                [20, 1, 3, 67500, 104, 105, 96, 38,],
                [21, 2, 3, 67500, 104, 105, 160, 64,],
                [22, 3, 3, 67500, 104, 105, 224, 90,],
                [23, 4, 3, 67500, 104, 105, 256, 102,],
                [24, 5, 3, 202500, 104, 105, 160, 64,],
            ],
//gc5n,id,step,stage,gold,key1,key2,number1,number2,
            "gc5n": [
                [1, 0, 0, 25000, 104, 105, 20, 8,],
                [2, 1, 0, 25000, 104, 105, 30, 12,],
                [3, 2, 0, 25000, 104, 105, 50, 20,],
                [4, 3, 0, 25000, 104, 105, 70, 28,],
                [5, 4, 0, 25000, 104, 105, 80, 32,],
                [6, 5, 0, 75000, 104, 105, 50, 20,],
                [7, 0, 1, 50000, 104, 105, 40, 16,],
                [8, 1, 1, 50000, 104, 105, 60, 24,],
                [9, 2, 1, 50000, 104, 105, 100, 40,],
                [10, 3, 1, 50000, 104, 105, 140, 56,],
                [11, 4, 1, 50000, 104, 105, 160, 64,],
                [12, 5, 1, 150000, 104, 105, 100, 40,],
                [13, 0, 2, 75000, 104, 105, 60, 24,],
                [14, 1, 2, 75000, 104, 105, 90, 36,],
                [15, 2, 2, 75000, 104, 105, 150, 60,],
                [16, 3, 2, 75000, 104, 105, 210, 84,],
                [17, 4, 2, 75000, 104, 105, 240, 96,],
                [18, 5, 2, 225000, 104, 105, 150, 60,],
                [19, 0, 3, 100000, 104, 105, 80, 32,],
                [20, 1, 3, 100000, 104, 105, 120, 48,],
                [21, 2, 3, 100000, 104, 105, 200, 80,],
                [22, 3, 3, 100000, 104, 105, 280, 112,],
                [23, 4, 3, 100000, 104, 105, 320, 128,],
                [24, 5, 3, 300000, 104, 105, 200, 80,],
            ],
//skill3n,id,step,stage,
            "skill3n": [
                [1, 6, 110,],
                [2, 6, 110,],
                [3, 12, 110,],
                [4, 18, 110,],
            ],
//skill4n,id,step,stage,
            "skill4n": [
                [1, 5, 111,],
                [2, 10, 111,],
                [3, 15, 111,],
                [4, 15, 111,],
            ],
//skill5n,id,step,stage,
            "skill5n": [
                [1, 2, 112,],
                [2, 4, 112,],
                [3, 6, 112,],
                [4, 10, 112,],
            ],
//makeup3n,id,step,
            "makeup3n": [
                [1, 1,],
                [2, 1,],
                [3, 2,],
                [4, 3,],
            ],
//makeup4n,id,step,
            "makeup4n": [
                [1, 1,],
                [2, 2,],
                [3, 3,],
                [4, 3,],
            ],
//makeup5n,id,step,
            "makeup5n": [
                [1, 1,],
                [2, 2,],
                [3, 3,],
                [4, 5,],
            ],
        }
    },

    methods: {
        // 获取星级数组
        getStarArr(){
            let _this = this;
            for (let i =1;i<=4; i++) {
                for (let j =0;j<=5; j++) {
                    _this.starArr.push(i+"星"+j+"阶");
                }
            }
            _this.starArr.push("5星0阶")
        },
        // 保存馆藏
        saveCollection(){
            let _this = this;
            _this.setLocalStorage(_this.collectionKey, _this.collection);
        },
        // 获取馆藏localstorage
        getCollection(){
            //[{name:'白日梦少女',level:1}]
            let _this = this;
            if (_this.getLocalStorage(_this.collectionKey)) {
                _this.collection = JSON.parse(_this.getLocalStorage(_this.collectionKey));
            } else {
                var arr=[]
                for (let key in _this.makeupData) {
                    var val=_this.makeupData[key][13]
                    var level = 0;//设置馆藏的初始等级
                    var tempObj = {}
                    tempObj.name = val;
                    tempObj.level = level;
                    var _flag = arr.find((item)=>{
                        return item.name == val;
                    });
                    if (!_flag){
                        arr.push(tempObj)
                    }
                }
                _this.collection = arr;
            }
        },
        //
        // 卡牌库-角色属性保存localstorage
        saveCards(){
            let _this=this;
            _this.setLocalStorage(_this.allRoleKey+_this.allRoleObj.propRoleKey, _this.allRoleObj);
        },
        // 卡牌库-属性-change事件
        allPropChange() {
            let _this = this;
            _this.getAllPropRoleObj();
            _this.getAllRole();
        },
        // 卡牌库-获取选中属性的角色列表 allPropRoleObj
        getAllPropRoleObj(){
            let _this = this;
            _this.allPropRoleObj = {};//卡牌库
            for (let i =1; i<=_this.makeupSum; i++) {
                if (_this.makeupData[i][2]>=4) {//稀有度 非凡以上
                    if (_this.makeupData[i][3]==_this.allPropKey) {//选中的主属性
                        _this.allPropRoleObj[i] = _this.makeupData[i][1]+"-"+_this.makeupData[i][0];
                    }
                }
            }
            _this.allRoleObj.propRoleKey = Object.keys(_this.allPropRoleObj)[0];
            _this.allRoleObj.propRoleVal = _this.allPropRoleObj[_this.allRoleObj.propRoleKey];
            console.log('卡牌库-角色列表',_this.allPropRoleObj)
        },
        // 卡牌库-如果localStorage里已存在，获取选中角色的属性对象allRoleObj，否则取初始值;角色-change事件
        getAllRole(){
            let _this = this;
            let allRoleKeyStorage = _this.getLocalStorage(_this.allRoleKey+_this.allRoleObj.propRoleKey);
            if(allRoleKeyStorage && JSON.parse(allRoleKeyStorage).propRoleKey == _this.allRoleObj.propRoleKey){
                _this.allRoleObj = JSON.parse(allRoleKeyStorage);
            } else {
                _this.getAllPassiveSkillVal(_this.allRoleObj, _this.allPropRoleObj);
                _this.getAllRoleCollection(_this.allRoleObj);
            }
        },
        // 卡牌库-核心印象change
        allCoreImpressionChange(){
            let _this = this;
            if (_this.allRoleObj.coreImpressionVal == 5){
                _this.allRoleObj.coreImpressionTypeVal = 1;
            }
        },
        //
        // 卡牌1-属性-change事件
        mainPropChange() {
            let _this = this;
            _this.getMainPropRoleObj();
            _this.getMainRole();
        },
        // 卡牌1-获取选中属性的角色列表 mainPropRoleObj
        getMainPropRoleObj(){
            let _this = this;
            _this.mainPropRoleObj = {};//卡牌
            for (let i =1; i<=_this.makeupSum; i++) {
                if (_this.makeupData[i][2]>=4) {//稀有度 非凡以上
                    if (_this.makeupData[i][3]==_this.mainPropKey) {//选中的主属性
                        _this.mainPropRoleObj[i] = _this.makeupData[i][1]+"-"+_this.makeupData[i][0];
                    }
                }
            }
            _this.mainRoleObj.propRoleKey = Object.keys(_this.mainPropRoleObj)[0];
            _this.mainRoleObj.propRoleVal = _this.mainPropRoleObj[_this.mainRoleObj.propRoleKey];
            console.log('卡牌1-角色列表',_this.mainPropRoleObj)
        },
        // 卡牌1-如果localStorage里已存在，获取选中角色的属性对象mainRoleObj，否则取初始值;角色-change事件
        getMainRole(){
            let _this = this;
            let allRoleKeyStorage = _this.getLocalStorage(_this.allRoleKey+_this.mainRoleObj.propRoleKey);
            if(allRoleKeyStorage && JSON.parse(allRoleKeyStorage).propRoleKey == _this.mainRoleObj.propRoleKey){
                _this.mainRoleObj = JSON.parse(allRoleKeyStorage);
            } else {
                _this.getAllPassiveSkillVal(_this.mainRoleObj, _this.mainPropRoleObj);
                _this.getAllRoleCollection(_this.mainRoleObj);
            }
        },
        // 卡牌1-核心印象change
        mainCoreImpressionChange(){
            let _this = this;
            if (_this.mainRoleObj.coreImpressionVal == 5){
                _this.mainRoleObj.coreImpressionTypeVal = 1;
            }
        },
        //
        // 卡牌2-属性-change事件
        secondPropChange() {
            let _this = this;
            _this.getSecondPropRoleObj();
            _this.getSecondRole();
        },
        // 卡牌2-获取选中属性的角色列表 secondPropRoleObj
        getSecondPropRoleObj(){
            let _this = this;
            _this.secondPropRoleObj = {};//卡牌
            for (let i =1; i<=_this.makeupSum; i++) {
                if (_this.makeupData[i][2]>=4) {//稀有度 非凡以上
                    if (_this.makeupData[i][3]==_this.secondPropKey) {//选中的主属性
                        _this.secondPropRoleObj[i] = _this.makeupData[i][1]+"-"+_this.makeupData[i][0];
                    }
                }
            }
            _this.secondRoleObj.propRoleKey = Object.keys(_this.secondPropRoleObj)[0];
            _this.secondRoleObj.propRoleVal = _this.secondPropRoleObj[_this.secondRoleObj.propRoleKey];
            console.log('卡牌2-角色列表',_this.secondPropRoleObj)
        },
        // 卡牌2-如果localStorage里已存在，获取选中角色的属性对象secondRoleObj，否则取初始值;角色-change事件
        getSecondRole(){
            let _this = this;
            let allRoleKeyStorage = _this.getLocalStorage(_this.allRoleKey+_this.secondRoleObj.propRoleKey);
            if(allRoleKeyStorage && JSON.parse(allRoleKeyStorage).propRoleKey == _this.secondRoleObj.propRoleKey){
                _this.secondRoleObj = JSON.parse(allRoleKeyStorage);
            } else {
                _this.getAllPassiveSkillVal(_this.secondRoleObj, _this.secondPropRoleObj);
                _this.getAllRoleCollection(_this.secondRoleObj);
            }
        },
        // 卡牌2-核心印象change
        secondCoreImpressionChange(){
            let _this = this;
            if (_this.secondRoleObj.coreImpressionVal == 5){
                _this.secondRoleObj.coreImpressionTypeVal = 1;
            }
        },
        //
        // 通用方法-获取选中角色影子技能和被动技能-初始值
        getAllPassiveSkillVal(roleObj, propRoleObj){
            let _this = this;
            if (roleObj && propRoleObj) {
                roleObj.propRoleVal = propRoleObj[roleObj.propRoleKey];
                roleObj.shadowVal = _this.makeupData[roleObj.propRoleKey][9];
                roleObj.shadowLevelVal = 1;
                roleObj.passiveSkillVal1 = _this.makeupData[roleObj.propRoleKey][10]+1;
                roleObj.passiveSkillVal2 = _this.makeupData[roleObj.propRoleKey][11]+1;
                roleObj.passiveSkillVal3 = _this.makeupData[roleObj.propRoleKey][12]+1;
                roleObj.passiveSkillLevelVal1 = 1;
                roleObj.passiveSkillLevelVal2 = 1;
                roleObj.passiveSkillLevelVal3 = 1;
            }
        },
        // 通用方法-获取选中角色对应的馆藏等级-初始值(馆藏列表也存了localStorage)
        getAllRoleCollection(roleObj){
            let _this = this;
            let gcName = _this.makeupData[roleObj.propRoleKey][13];
            if (_this.collection){
                _this.collection.forEach(function (item) {
                    if (item.name == gcName){
                        roleObj.collectVal = item.level
                    }
                })
            }
        },
        //
        // 对比
        compareScore() {
            let _this = this;
            var temp, temp2
            _this.mainPower = _this.getPower(
                _this.mainRoleObj.propRoleKey,
                _this.mainRoleObj.roleLevelVal,
                _this.mainRoleObj.starVal,
                _this.mainRoleObj.isFusu,
                _this.mainRoleObj.collectVal,
                _this.mainPropKey);
            _this.mainScore = _this.getScore(
                _this.mainPropRoleObj,
                _this.mainRoleObj.propRoleKey,
                1+_this.mainRoleObj.shadowVal,
                _this.mainRoleObj.shadowLevelVal,
                _this.mainRoleObj.passiveSkillVal1,
                _this.mainRoleObj.passiveSkillVal2,
                _this.mainRoleObj.passiveSkillVal3,
                _this.mainRoleObj.passiveSkillLevelVal1,
                _this.mainRoleObj.passiveSkillLevelVal2,
                _this.mainRoleObj.passiveSkillLevelVal3,
                _this.mainRoleObj.coreImpressionVal,
                _this.mainRoleObj.coreImpressionLevelVal,
                _this.mainRoleObj.coreImpressionTypeVal);
            _this.secondPower = _this.getPower(
                _this.secondRoleObj.propRoleKey,
                _this.secondRoleObj.roleLevelVal,
                _this.secondRoleObj.starVal,
                _this.secondRoleObj.isFusu,
                _this.secondRoleObj.collectVal,
                _this.secondPropKey);
            _this.secondScore = _this.getScore(
                _this.secondPropRoleObj,
                _this.secondRoleObj.propRoleKey,
                1+_this.secondRoleObj.shadowVal,
                _this.secondRoleObj.shadowLevelVal,
                _this.secondRoleObj.passiveSkillVal1,
                _this.secondRoleObj.passiveSkillVal2,
                _this.secondRoleObj.passiveSkillVal3,
                _this.secondRoleObj.passiveSkillLevelVal1,
                _this.secondRoleObj.passiveSkillLevelVal2,
                _this.secondRoleObj.passiveSkillLevelVal3,
                _this.secondRoleObj.coreImpressionVal,
                _this.secondRoleObj.coreImpressionLevelVal,
                _this.secondRoleObj.coreImpressionTypeVal);
            console.log(_this.mainPower,_this.secondPower,_this.mainScore,_this.secondScore)
            if ((_this.mainPower+_this.mainPropScore)>(_this.secondPower+_this.secondPropScore) && _this.mainScore<_this.secondScore){
                _this.compareResult = Math.floor((_this.secondScore*(_this.secondPower+_this.secondPropScore)-_this.mainScore*(_this.mainPower+_this.mainPropScore))/(_this.mainScore-_this.secondScore));
            }
        },
        getPower(roleKey, roleLevel, star, isFusu, collect, mainPropKey){//角色，等级，星级，是否复苏，馆藏，主属性卡
            let _this = this;
            var temp;
            temp = parseInt(_this.makeupData[roleKey][3 + parseInt(mainPropKey)]);
            temp = temp + _this.Calc(parseInt(roleLevel), parseInt(star) + 1, parseInt(_this.makeupData[roleKey][2]), (parseInt(_this.makeupData[roleKey][3]) == parseInt(mainPropKey) ? 1 : 0))
            temp = temp * (parseInt(collect) * 0.02 + (isFusu ? 1.15 : 1));
            temp = Math.round(temp);
            return temp;
        },
        Calc(tl, ts, star, iifm){
            let _this = this;
            if (iifm == 1) {
                return parseInt(_this.subLevelVal("lvstatus", 2, star, 1, tl)) + parseInt(_this.subLevelVal("g", 3, star, 1, ts))
            } else {
                return parseInt(_this.subLevelVal("lvstatus", 3, star, 1, tl))
            }
        },
        subLevelVal(tpln, index, star, lv1, lv2) {
            let _this = this;
            return _this.getLevelVal(tpln, index, star, lv2);
        },
        getLevelVal(tpln, index, star, lv) {
            let _this = this;
            return _this.makeupTemplate[tpln + star + "n"][lv - 1][index];
        },
        getScore(propRoleObj,Char,Skill,SkillLevel,S1,S2,S3,S1L,S2L,S3L,YXRank,YXLevel,YXType){
            //角色，影子，影子等级，被动技能1,2,3，被动技能等级1,2,3，核心印象，印象深化，印象种类
            console.log(Char,Skill,SkillLevel,S1,S2,S3,S1L,S2L,S3L,YXRank,YXLevel,YXType)//5 0 1 2 3 4 1 1 1 2 5 1
            let _this = this;
            var YXXINup,YXYINGup,Rank,Level,XINup,K = 0;
            var Multiply = [];
            var FU;
            var XIN = [];
            var YING = [];
            var SHAN = [];
            var SHANup = [];
            var XINT = [];
            var YZZH = [];
            var s10 = [];
            var s20 = [];
            var Score = [];
            var Power = [];
            var SF = [];
            var stat = [];
            SF[1] = 0
            SF[2] = 0
            SF[3] = 0
            Multiply[1] = 0
            Multiply[2] = 0
            Multiply[3] = 0
            Multiply[4] = 0
            Multiply[5] = 0
            Multiply[6] = 0
            Multiply[7] = 0
            Multiply[8] = 0
            var X, S, higher, lower, high, low, name1, name2, hh, M, Shuxing;
            var probability = [0.1, 0.16, 0.2, 0.25, 0.18];
            var BaoFa = probability[YXRank - 1];
            var Mode = _this.czMode !== 1
            if (YXType == 1) {//设置印象加分项
                YXXINup = _this.YXPoint(YXRank, YXLevel) / 100;
                YXYINGup = 0;
            } else {
                YXYINGup = _this.YXPoint(YXRank, YXLevel) / 100;
                YXXINup = 0;
            }
            for (var i = 1; i <= 1; i++) {
                SHANup[i] = 0
                Multiply[1] = 0
                Multiply[2] = 0
                Multiply[3] = 0
                Multiply[4] = 0
                XINT[i] = 0
                s10[i] = false
                s20[i] = false
                Rank = parseInt(_this.makeupData[Char][2]) - 2;
                for (let num = 1; num <= 4; num++) {
                    if (S1 == num) {
                        Multiply[num] = _this.getPassiveSkill(Rank, S1L, num)
                    }
                    if (S2 == num) {
                        Multiply[num] = _this.getPassiveSkill(Rank, S2L, num)
                    }
                    if (S3 == num) {
                        Multiply[num] = _this.getPassiveSkill(Rank, S3L, num)
                    }
                }
                //Multiply[4] = Multiply[4] * 5//设置被动加分项
                Level = parseInt(SkillLevel)//设置主动加分项
                switch (Rank.toString()) {
                    case "1"://稀有
                        switch (Skill.toString()) {
                            case "1"://闪耀时刻加成
                                YZZH[i] = 10 + 2 * Level
                                switch (Level) {
                                    case 1:
                                        SHANup[i] = 37.5
                                        break;
                                    case 2:
                                        SHANup[i] = 43.8
                                        break;
                                    case 3:
                                        SHANup[i] = 50
                                        break;
                                    case 4:
                                        SHANup[i] = 56.3
                                        break;
                                    case 5:
                                        SHANup[i] = 62.5
                                        break;
                                }
                                break;
                            case "2"://环节加成
                                switch (Level) {
                                    case 1:
                                        YZZH[i] = 19.5
                                        break;
                                    case 2:
                                        YZZH[i] = 22.8
                                        break;
                                    case 3:
                                        YZZH[i] = 26
                                        break;
                                    case 4:
                                        YZZH[i] = 29.3
                                        break;
                                    case 5:
                                        YZZH[i] = 32.5
                                        break;
                                }
                                break;
                            case "4"://20s加成
                                YZZH[i] = 12 + (Level - 1) * 2
                                s20[i] = true
                                switch (Level) {
                                    case 1:
                                        XINT[i] = 11.5
                                        break;
                                    case 2:
                                        XINT[i] = 13.4
                                        break;
                                    case 3:
                                        XINT[i] = 15.4
                                        break;
                                    case 4:
                                        XINT[i] = 17.3
                                        break;
                                    case 5:
                                        XINT[i] = 19.2
                                        break;
                                }
                                break;
                            case "3"://10s加成
                                YZZH[i] = 12 + (Level - 1) * 2
                                s10[i] = true
                                switch (Level) {
                                    case 1:
                                        XINT[i] = 21.4
                                        break;
                                    case 2:
                                        XINT[i] = 25
                                        break;
                                    case 3:
                                        XINT[i] = 28.6
                                        break;
                                    case 4:
                                        XINT[i] = 32.1
                                        break;
                                    case 5:
                                        XINT[i] = 35.7
                                        break;
                                }
                                break;
                            case "5"://双闪
                                YZZH[i] = (Level) * 2.5
                                SHANup[i] = 100
                                break;
                            case "6"://功能
                                switch (Level) {
                                    case 1:
                                        YZZH[i] = 4.5
                                        break;
                                    case 2:
                                        YZZH[i] = 5.3
                                        break;
                                    case 3:
                                        YZZH[i] = 6
                                        break;
                                    case 4:
                                        YZZH[i] = 6.8
                                        break;
                                    case 5:
                                        YZZH[i] = 7.5
                                        break;
                                }
                                break;
                        }
                        break;
                    case "3"://闪耀
                        switch (Skill.toString()) {
                            case "1"://闪耀时刻加成
                                YZZH[i] = 12.5 + 2.5 * Level
                                SHANup[i] = 62.5 + Level * 12.5
                                break;
                            case "2"://环节加成
                                YZZH[i] = 25 + Level * 5
                                break;
                            case "4"://20s加成
                                YZZH[i] = 18 + (Level - 1) * 3
                                s20[i] = true
                                switch (Level) {
                                    case 1:
                                        XINT[i] = 18.5
                                        break;
                                    case 2:
                                        XINT[i] = 21.6
                                        break;
                                    case 3:
                                        XINT[i] = 24.6
                                        break;
                                    case 4:
                                        XINT[i] = 27.7
                                        break;
                                    case 5:
                                        XINT[i] = 30.8
                                        break;
                                }
                                break;
                            case "3"://10s加成
                                YZZH[i] = 18 + (Level - 1) * 3
                                s10[i] = true
                                switch (Level) {
                                    case 1:
                                        XINT[i] = 34.2
                                        break;
                                    case 2:
                                        XINT[i] = 40
                                        break;
                                    case 3:
                                        XINT[i] = 45.6
                                        break;
                                    case 4:
                                        XINT[i] = 51.3
                                        break;
                                    case 5:
                                        XINT[i] = 57.1
                                        break;
                                }
                                break;
                            case "5"://双闪
                                alert("尚未有闪耀属性的双闪瞬设计师，数据仅供参考。")
                                YZZH[i] = (Level) * 6
                                SHANup[i] = 100
                                break;
                            case "6"://功能
                                alert("尚未有闪耀属性功能卡设计师，数据仅供参考。")
                                YZZH[i] = 100
                                break;
                        }
                        break;
                    case "2"://非凡
                        switch (Skill.toString()) {
                            case "1"://闪耀时刻加成
                                hh = Object.values(propRoleObj)[0];
                                if ((hh == "晴夏海风-暖暖") || (hh == "灵魂魔术-夜骸")) {
                                    YZZH[i] = 10 + 2 * Level
                                    SHANup[i] = 50 + Level * 10
                                } else {
                                    YZZH[i] = 12.5 + 2.5 * Level
                                    SHANup[i] = 37.5 + Level * 7.5
                                }
                                break;
                            case "2"://环节加成
                                YZZH[i] = 20 + Level * 4
                                break;
                            case "4"://20s加成
                                YZZH[i] = 15 + (Level - 1) * 2.5
                                s20[i] = true
                                XINT[i] = 13.9 + (Level - 1) * 2.3
                                break;
                            case "3"://10s加成
                                YZZH[i] = 15 + (Level - 1) * 2.5
                                s10[i] = true
                                XINT[i] = 25.7 + (Level - 1) * 4.3
                                break;
                            case "5"://双闪
                                YZZH[i] = (Level) * 4
                                SHANup[i] = 100
                                break;
                            case "6"://功能
                                YZZH[i] = 9 + (Level - 1) * 1.5
                                break;
                        }
                }
                FU = "1"
                SHAN[i] = 0.2 * (1 + SHANup[i] / 100)
                YING[i] = (YZZH[i] / 100) * (1 + YXYINGup)
                for (var num = 1; num <= 8; num++) {
                    var adda
                    if (s20[i] == true) {
                        if (num == 1) {
                            if (Mode) {
                                adda = true
                            } else {
                                adda = true
                            }
                        }//4 头发
                        if (num == 2) {
                            if (Mode) {
                                adda = false
                            } else {
                                adda = true
                            }
                        }//1 裙子
                        if (num == 3) {
                            if (Mode) {
                                adda = false
                            } else {
                                adda = false
                            }
                        }//8 鞋袜
                        if (num == 4) {
                            if (Mode) {
                                adda = false
                            } else {
                                adda = true
                            }
                        }//2 饰品1
                        if (num == 5) {
                            if (Mode) {
                                adda = true
                            } else {
                                adda = true
                            }
                        }//3 饰品2
                        if (num == 6) {
                            if (Mode) {
                                adda = true
                            } else {
                                adda = true
                            }
                        }//5 饰品3
                        if (num == 7) {
                            if (Mode) {
                                adda = true
                            } else {
                                adda = true
                            }
                        }//6 饰品4
                        if (num == 8) {
                            if (Mode) {
                                adda = true
                            } else {
                                adda = false
                            }
                        }//7 饰品5
                    }
                    if (s10[i] == true) {
                        if (num == 1) {
                            if (Mode) {
                                adda = true
                            } else {
                                adda = true
                            }
                        }//4 头发
                        if (num == 2) {
                            if (Mode) {
                                adda = false
                            } else {
                                adda = true
                            }
                        }//1 裙子
                        if (num == 3) {
                            if (Mode) {
                                adda = false
                            } else {
                                adda = false
                            }
                        }//8 鞋袜
                        if (num == 4) {
                            if (Mode) {
                                adda = false
                            } else {
                                adda = true
                            }
                        }//2 饰品1
                        if (num == 5) {
                            if (Mode) {
                                adda = false
                            } else {
                                adda = true
                            }
                        }//3 饰品2
                        if (num == 6) {
                            if (Mode) {
                                adda = true
                            } else {
                                adda = false
                            }
                        }//5 饰品3
                        if (num == 7) {
                            if (Mode) {
                                adda = false
                            } else {
                                adda = false
                            }
                        }//6 饰品4
                        if (num == 8) {
                            if (Mode) {
                                adda = false
                            } else {
                                adda = false
                            }
                        }//7 饰品5
                    }
                    XINup = adda ? XINT[i] / 100 : 0
                    XIN[num] = ((num > 3 ? 0.025 : 0.125) + Multiply[(num > 3 ? 4 : num)] / 100) * (1 + XINup + YXXINup + ((Mode == false) && (num == 4 || num == 2) ? 1 : (Mode == false ? 0 : BaoFa)) * 0.5)
                }
                K = 3 * (1 + XIN[1] + XIN[2] + XIN[3] + XIN[4] + XIN[5] + XIN[6] + XIN[7] + XIN[8] + YING[i] + SHAN[i])
                K = K.toFixed(4)
                Score[i] = K
            }
            return Score[1];
        },
        YXPoint(rank, level) {
            if (rank == "1") {
                var Point = [0, 7, 10, 12, 14, 15]
            }
            if (rank == "2") {
                var Point = [0, 11.2, 16, 19.2, 22.4, 24]
            }
            if (rank == "3") {
                var Point = [0, 14, 20, 24, 28, 30]
            }
            if (rank == "4") {
                var Point = [0, 17.5, 25, 30, 35, 37.5]
            }
            if (rank == "5") {
                var Point = [0, 12.6, 18, 21.6, 25.2, 27]
            }
            return Point[parseInt(level)]
        },
        getPassiveSkill(rank, level, type){
            var s = 0;
            switch (rank) {
                case 1://稀有
                    if (type == 4) {//不是饰品
                        s = parseInt(level) * 0.2
                    } else {//是饰品
                        s = parseInt(level)
                    }
                    break;
                case 2://非凡
                    if (type == 4) {
                        s = 0.4 * parseInt(level)
                    } else {
                        s = parseInt(level) * 2
                    }
                    break;
                case 3://闪耀
                    if (type == 4) {
                        s = 0.6 + (parseInt(level) - 1) * 0.7
                        if (parseInt(level) == 4) {
                            s = s - 0.1
                        }//修正
                    } else {
                        s = 3.3 + (parseInt(level) - 1) * 3.4
                        if (parseInt(level) == 3) {
                            s = s - 0.1
                        }
                        if (parseInt(level) > 3) {
                            s = s - 0.2
                        }//修
                    }
                    break;
            }
            return s;
        },
        getLocalStorage(key){
            var s = localStorage.getItem(key);
            return s;
        },
        setLocalStorage(key,val){
            if (val instanceof Object) {
                localStorage.setItem(key,JSON.stringify(val));
            } else {
                localStorage.setItem(key,val)
            }
        }
    },

    created() {
        let _this = this;
        _this.getStarArr();
        _this.getCollection();
        _this.allPropChange();
        _this.mainPropChange();
        _this.secondPropChange();
    },

    mounted() {
        let _this = this;

    },

    filters: {
        reverse: function (arr) {
            return arr.reverse()
        }
    }

})